package se.yrgo.dataaccess;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import se.yrgo.domain.Call;
import se.yrgo.domain.Customer;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.List;

public class CustomerDaoJdbcTemplateImpl implements CustomerDao {

    private static String CREATE_CUSTOMER_SQL = "CREATE TABLE IF NOT EXISTS CUSTOMER (CUSTOMER_ID VARCHAR(120), COMPANY_NAME VARCHAR(120), EMAIL VARCHAR(80), TELEPHONE VARCHAR(20), NOTES VARCHAR(255), PRIMARY KEY(CUSTOMER_ID))";
    private static String CREATE_PHONECALL_SQL = "CREATE TABLE IF NOT EXISTS PHONECALL (PHONECALL_ID integer generated by default as identity (start with 1), CUSTOMER_ID VARCHAR(255), TIME_AND_DATE DATE, NOTES VARCHAR(255))";
    private static String CUSTOMER_UPDATE_SQL = "UPDATE CUSTOMER SET COMPANY_NAME=?, EMAIL=?, TELEPHONE=?, NOTES=? WHERE CUSTOMER_ID=?";
    private static String CUSTOMER_DELETE_SQL = "DELETE FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static String CUSTOMER_INSERT_SQL = "INSERT INTO CUSTOMER (CUSTOMER_ID, COMPANY_NAME, EMAIL, TELEPHONE, NOTES) VALUES (?, ?, ?, ?, ?)";
    private static String CUSTOMER_GET_BY_ID = "SELECT COMPANY_NAME, EMAIL FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static String CUSTOMER_GET_BY_NAME = "SELECT COMPANY_NAME, EMAIL FROM CUSTOMER WHERE COMPANY_NAME=?";
//    private static String CUSTOMER_GET_FULL_DETAIL = "SELECT DISTINCT * FROM CUSTOMER AS CUST JOIN PHONECALL AS PC ON CUST.CUSTOMER_ID=PC.CUSTOMER_ID WHERE CUSTOMER_ID=?";
    private static String CALL_INSERT_SQL = "INSERT INTO PHONECALL (CUSTOMER_ID, TIME_AND_DATE, NOTES) VALUES(?, ?, ?)";


    private JdbcTemplate template;

    public CustomerDaoJdbcTemplateImpl(JdbcTemplate template) {
        this.template = template;
    }

    public void createTables() {
        try {
            this.template.update(CREATE_CUSTOMER_SQL);
            this.template.update(CREATE_PHONECALL_SQL);
        } catch(org.springframework.jdbc.BadSqlGrammarException ex){
            System.out.println("Assuming the Action table exists");
        }
    }

    @Override
    public void create(Customer customer) {
    template.update(CUSTOMER_INSERT_SQL, customer.getCustomerId(), customer.getCompanyName(), customer.getEmail(), customer.getTelephone(), customer.getNotes());
    }

    @Override
    public Customer getById(String customerId) throws RecordNotFoundException {
        return this.template.queryForObject(CUSTOMER_GET_BY_ID, new CustomerRowMapper(), customerId);
    }

    @Override
    public List<Customer> getByName(String name) throws RecordNotFoundException {
        return this.template.query(CUSTOMER_GET_BY_NAME, new CustomerRowMapper(), name);
    }

    @Override
    public void update(Customer customerToUpdate) throws RecordNotFoundException {
        this.template.update(CUSTOMER_UPDATE_SQL, customerToUpdate.getCompanyName(), customerToUpdate.getEmail(), customerToUpdate.getTelephone(), customerToUpdate.getNotes());
    }

    @Override
    public void delete(Customer oldCustomer) throws RecordNotFoundException {
        this.template.update(CUSTOMER_DELETE_SQL, oldCustomer.getCustomerId());
    }

    @Override
    public List<Customer> getAllCustomers() throws RecordNotFoundException {
        return this.template.query("SELECT * FROM CUSTOMER", new CustomerRowMapper());
    }

    @Override
    public Customer getFullCustomerDetail(String customerId) throws RecordNotFoundException {
        Customer customer = template.queryForObject(
                "SELECT * FROM CUSTOMER WHERE CUSTOMER_ID = ?",
                new CustomerRowMapper(),
                customerId
        );
        List<Call> calls = template.query(
                "SELECT * FROM PHONECALL WHERE CUSTOMER_ID = ?",
                new CallRowMapper(),
                customerId
        );
        customer.setCalls(calls);
        return customer;

        //Tried to get the JOIN-column to work for the method, but it didn't connect.
//        Customer customer = template.queryForObject("SELECT * FROM CUSTOMER WHERE CUSTOMER_ID=?", new CustomerRowMapper(), customerId);
//        customer.setCalls(template.query("SELECT * FROM PHONECALL WHERE CUSTOMER_ID=?", new CallRowMapper(), customerId));
//        return customer;
    }

    @Override
    public void addCall(Call newCall, String customerId) throws RecordNotFoundException {
        this.template.update(CALL_INSERT_SQL, customerId, newCall.getTimeAndDate(), newCall.getNotes());
    }
    }

class CustomerRowMapper implements RowMapper<Customer> {
    public Customer mapRow(ResultSet rs, int arg1) throws SQLException 	{
        String customerId = rs.getString(1);
        String companyName = rs.getString(2);
        String email = rs.getString(3);
        String telephone = rs.getString(4);
        String notes = rs.getString(5);

        return new Customer(customerId, companyName, email, telephone, notes);
    }
}
class CallRowMapper implements RowMapper<Call> {
    public Call mapRow(ResultSet rs, int arg1) throws SQLException 	{
        String notes = rs.getString(4);
        Date timeAndDate = rs.getDate(3);

        return new Call(notes, timeAndDate);
    }
}